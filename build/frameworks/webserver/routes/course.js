"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const courseController_1 = __importDefault(require("../../../adapters/controllers/courseController"));
const courseReposMongoDb_1 = require("../../../frameworks/database/mongodb/repositories/courseReposMongoDb");
const courseDbRepository_1 = require("../../../app/repositories/courseDbRepository");
const roleCheckMiddleware_1 = __importDefault(require("../middlewares/roleCheckMiddleware"));
const cloudServiceInterface_1 = require("../../../app/services/cloudServiceInterface");
const s3CloudService_1 = require("../../../frameworks/services/s3CloudService");
const multer_1 = __importDefault(require("../middlewares/multer"));
const quizDbRepository_1 = require("../../../app/repositories/quizDbRepository");
const quizzDbRepository_1 = require("../../../frameworks/database/mongodb/repositories/quizzDbRepository");
const lessonDbRepository_1 = require("../../../app/repositories/lessonDbRepository");
const lessonRepoMongodb_1 = require("../../../frameworks/database/mongodb/repositories/lessonRepoMongodb");
const discussionDbRepository_1 = require("../../../app/repositories/discussionDbRepository");
const discussionsRepoMongodb_1 = require("../../../frameworks/database/mongodb/repositories/discussionsRepoMongodb");
const paymentRepoMongodb_1 = require("../../../frameworks/database/mongodb/repositories/paymentRepoMongodb");
const paymentDbRepository_1 = require("../../../app/repositories/paymentDbRepository");
const userAuth_1 = __importDefault(require("../middlewares/userAuth"));
const redisCacheRepository_1 = require("../../../frameworks/database/redis/redisCacheRepository");
const cachedRepoInterface_1 = require("../../../app/repositories/cachedRepoInterface");
const redisCaching_1 = require("../middlewares/redisCaching");
const courseRouter = (redisClient) => {
    const router = express_1.default.Router();
    const controller = (0, courseController_1.default)(cloudServiceInterface_1.cloudServiceInterface, s3CloudService_1.s3Service, courseDbRepository_1.courseDbRepository, courseReposMongoDb_1.courseRepositoryMongodb, quizDbRepository_1.quizDbRepository, quizzDbRepository_1.quizRepositoryMongodb, lessonDbRepository_1.lessonDbRepository, lessonRepoMongodb_1.lessonRepositoryMongodb, discussionDbRepository_1.discussionDbRepository, discussionsRepoMongodb_1.discussionRepositoryMongoDb, paymentDbRepository_1.paymentInterface, paymentRepoMongodb_1.paymentRepositoryMongodb, cachedRepoInterface_1.cacheRepositoryInterface, redisCacheRepository_1.redisCacheRepository, redisClient);
    //* Add course
    router.post('/instructors/add-course', userAuth_1.default, (0, roleCheckMiddleware_1.default)('instructor'), multer_1.default.array('files'), controller.addCourse);
    router.put('/instructors/edit-course/:courseId', userAuth_1.default, (0, roleCheckMiddleware_1.default)('instructor'), multer_1.default.array('files'), controller.editCourse);
    router.get('/get-all-courses', (0, redisCaching_1.cachingMiddleware)(redisClient, 'all-courses'), controller.getAllCourses);
    router.get('/get-course/:courseId', controller.getIndividualCourse);
    router.get('/get-course-by-instructor', userAuth_1.default, (0, roleCheckMiddleware_1.default)('instructor'), controller.getCoursesByInstructor);
    router.post('/instructors/add-lesson/:courseId', userAuth_1.default, (0, roleCheckMiddleware_1.default)('instructor'), multer_1.default.array('media'), controller.addLesson);
    router.put('/instructors/edit-lesson/:lessonId', userAuth_1.default, (0, roleCheckMiddleware_1.default)('instructor'), multer_1.default.array('media'), controller.editLesson);
    router.get('/instructors/get-lessons-by-course/:courseId', controller.getLessonsByCourse);
    router.get('/get-lessons-by-id/:lessonId', controller.getLessonById);
    router.get('/get-quizzes-by-lesson/:lessonId', controller.getQuizzesByLesson);
    router.post('/lessons/add-discussion/:lessonId', userAuth_1.default, controller.addDiscussion);
    router.get('/lessons/get-discussions-by-lesson/:lessonId', controller.getDiscussionsByLesson);
    router.patch('/lessons/edit-discussion/:discussionId', userAuth_1.default, controller.editDiscussions);
    router.delete('/lessons/delete-discussion/:discussionId', userAuth_1.default, controller.deleteDiscussion);
    router.put('/lessons/reply-discussion/:discussionId', userAuth_1.default, controller.replyDiscussion);
    router.get('/lesson/replies-based-on-discussion/:discussionId', controller.getRepliesByDiscussion);
    router.post('/enroll-student/:courseId', userAuth_1.default, controller.enrollStudent);
    router.get('/get-recommended-courses', userAuth_1.default, (0, roleCheckMiddleware_1.default)('student'), controller.getRecommendedCourseByStudentInterest);
    router.get('/get-trending-courses', controller.getTrendingCourses);
    router.get('/get-course-by-student', userAuth_1.default, controller.getCourseByStudent);
    router.get('/search-course', (0, redisCaching_1.cachingMiddleware)(redisClient), controller.searchCourse);
    return router;
};
exports.default = courseRouter;
